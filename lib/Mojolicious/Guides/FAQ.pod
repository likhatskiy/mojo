
=head1 NAME

Mojolicious::Guides::FAQ - Frequently Asked Questions

=head1 OVERVIEW

This document contains the most frequently asked questions about
L<Mojolicious> together with the right answers.

=head1 QUESTIONS

=head2 Does L<Mojolicious> run on Windows systems?

Sure it does! Right now there are two different ways of running Perl
on the Windows platform. One is C<Strawberry Perl> and the other is
C<ActiveState Perl>. Both are capable Perl distributions which are
stable, mature and ready for production. C<Strawberry Perl> seems to be
the Perl distribution of choice for that platform. It comes with a fully
working toolchain around Perl which allows you to install modules from
the L<CPAN> archive even XS based modules.
With C<Strawberry Perl> it's even possible to download the sources from
the github repository, unzip them and install them straight from the
source as you would do on a Unix based machine.

=head2 Is it possible to run the builtin webserver on Windows?

It is! The builtin webserver is great way to run your L<Mojolicious>
web application on any platform. However there are some performance
drawbacks on Windows as it was optimized for Unix environments. Please
check L<Mojolicious::Guides::Cookbook> for more information about
running L<Mojolicious>.

Please note: If you run your L<Mojolicious::Lite> application with the
options C<daemon --reload> Windows will lock your file. If you use the
Windows editor C<WordPad> it will complain that this file has already
been opened by a different proccess. Using a more capable editor can
handle this accordingly by forcing the change. L<Mojolicious> will
notice the change and will reload your server.

=head2 I think L<Mojolicious> is awesome, how can i support you guys?

Share your success story via blog or twitter, get more people hooked! :)

=head2 I think i have found a bug, what should i do now?

Prepare a test case demonstrating the bug, you are not expected to fix it
yourself, but you'll have to make sure the developers can replicate your
problem.
Sending in your whole application generally does more harm than good, the
C<t> directory of this distribution has many good examples for how to do it
right.
Writing a test is usually the hardest part of fixing a bug, so the better
your test case the faster it can be fixed. ;)

Once thats done you can contact the developers via GitHub
(http://github.com/kraih/mojo), mailing list
(L<http://groups.google.com/group/mojolicious>) or IRC
(C<#mojo> on C<irc.perl.org>).

If you decide to fix the bug yourself make sure to also take a look at
L<Mojolicious::Guides::CodingGuidelines>.

=cut
